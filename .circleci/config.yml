version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2

jobs:
  
  lint-code:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            apk add --no-cache git make bash wget python3-dev build-base curl tar gzip 
            
      - run:
          name: lint code 
          command: |
            make setup
            source ~/.devops/bin/activate
            pip install --upgrade pip
            pip install typed_ast
            pip install pylint
            make install
            make lint
            
            
  build-pushDocker:
    docker:
      - image: cimg/node:16.4.1
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: build docker and push it
          command: |
            docker build --tag=capstone .
            ./upload_docker.sh

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=circleci-${CIRCLE_WORKFLOW_ID:0:7} \
               --stack-name "backendstack-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip text file
          command: |
            EIP=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`EIP-${CIRCLE_WORKFLOW_ID:0:7}\`].Value" \
              --no-paginate --output text)
            echo $EIP
            echo $EIP >> .circleci/backendIP.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/backendIP.txt
    
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install-kubectl
      - aws-eks/install-aws-iam-authenticator
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yaml
          resource-name: deployment/capstone
          show-kubectl-command: true
          
  test-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: test deployment
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
    
            
workflows:
  default:
    jobs:
      #- lint-code:
      #    context: udapeople
      #- build-pushDocker:
       #   context: udapeople
        #  requires: [lint-code]
      #- deploy-infrastructure:
        #  context: udapeople
       #   requires: [build-pushDocker]
      #- aws-eks/create-cluster:
        #  cluster-name: capstone
       #   context: udapeople
      #    requires: [deploy-infrastructure]
      - create-deployment:
          cluster-name: capstone
          context: udapeople
          #requires:
           # - aws-eks/create-cluster
      - test-deployment:
          cluster-name: capstone
          context: udapeople
          requires: [create-deployment]